[{"C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\App.tsx":"1","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\index.tsx":"2","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\Room.tsx":"3","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\Home.tsx":"4","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\Message.ts":"5","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\RoleView.tsx":"6","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\AssignmentDialog.tsx":"7","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\reportWebVitals.ts":"8","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\PresetDialog.tsx":"9"},{"size":495,"mtime":1610490993170,"results":"10","hashOfConfig":"11"},{"size":500,"mtime":1610488252939,"results":"12","hashOfConfig":"11"},{"size":14212,"mtime":1620943300326,"results":"13","hashOfConfig":"11"},{"size":2065,"mtime":1620945442984,"results":"14","hashOfConfig":"11"},{"size":1777,"mtime":1611006310561,"results":"15","hashOfConfig":"11"},{"size":1482,"mtime":1611004846348,"results":"16","hashOfConfig":"11"},{"size":983,"mtime":1611010618604,"results":"17","hashOfConfig":"11"},{"size":425,"mtime":1610488252939,"results":"18","hashOfConfig":"11"},{"size":3041,"mtime":1611354778779,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"11ts2vu",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\App.tsx",["41","42"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {Home} from \"./components/Home\";\nimport {Room} from \"./components/Room\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:roomCode\">\n          <Room />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\index.tsx",[],"C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\Room.tsx",["43","44","45","46","47","48","49","50","51"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {useParams} from \"react-router\";\r\nimport useWebSocket, {ReadyState} from \"react-use-websocket\";\r\nimport {Chat, ChatType, chatTypes, getFriendlyName, Message, Role, RoleAssignment, User} from \"../Message\";\r\n// @ts-ignore\r\nimport {Cell, Grid} from \"styled-css-grid\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Avatar, Badge,\r\n    Button,\r\n    Checkbox,\r\n    Dialog, DialogContent, DialogContentText, DialogTitle,\r\n    FormControlLabel,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    useMediaQuery\r\n} from \"@material-ui/core\";\r\nimport {RoleView} from \"./RoleView\"\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport {AssignmentDialog} from \"./AssignmentDialog\";\r\nimport {PresetDialog} from \"./PresetDialog\";\r\nimport {Build, Security, SecurityTwoTone} from \"@material-ui/icons\";\r\n\r\nexport const PageContainer = styled.div`\r\n  width: 100vw;\r\n  min-height: 100vh; // may need to be >100vh on mobile\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst CustomCell = styled(Cell)<{ padded?: boolean, boxed?: boolean, scroll?: boolean }>`\r\n  ${props => props.padded && \"padding: 0.5rem;\"}\r\n  ${props => props.boxed && \"border: 3px solid red;\"}\r\n  ${props => props.scroll && \"overflow-y: auto;\"}\r\n  overflow-wrap: break-word; // prevent expanding horizontally past the bounds of the container\r\n  height: unset; // corrects a bug in library\r\n`;\r\n\r\nconst ChatMessage: React.FunctionComponent<{ chat: Chat }> = (props) => {\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        const thisElement = ref.current\r\n        thisElement?.scrollIntoView()\r\n    }, [])\r\n\r\n    if (!props.chat || !props.chat.type)\r\n        return <></>\r\n    const userName = props.chat.type == ChatType.ANON ? \"Anonymous\" : props.chat.name\r\n    return <div ref={ref}>\r\n        [{getFriendlyName(props.chat.type)}] <b>{userName}:</b> {props.chat.msg}<br/>\r\n    </div>\r\n}\r\n\r\n// Returns an edited version of an array\r\n// Edits (or appends) a value at an index, or deletes an element if newVal is null\r\nfunction edit<T>(array: Array<T>, index: number, newVal: T | null): Array<T> {\r\n    const newArray = [...array]\r\n    if (!newVal) {\r\n        newArray.splice(index, 1)\r\n    } else {\r\n        newArray[index] = newVal\r\n    }\r\n    return newArray\r\n}\r\n\r\n// Used to debounce changes to name\r\n// So that name change API calls are only made when the user stops typing\r\nvar nameChangeTimeout: number | null = null\r\n\r\nexport const Room: React.FunctionComponent<{}> = (props) => {\r\n    const {roomCode} = useParams<{ roomCode: string }>()\r\n    const {\r\n        sendMessage,\r\n        sendJsonMessage,\r\n        lastMessage,\r\n        lastJsonMessage,\r\n        readyState,\r\n    } = useWebSocket(`ws://127.0.0.1/${roomCode}`, {\r\n        retryOnError: true,\r\n        reconnectInterval: 4000,\r\n        reconnectAttempts: 9\r\n    })\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: 'Attempting to connect to server...',\r\n        [ReadyState.OPEN]: 'Connection established.',\r\n        [ReadyState.CLOSING]: 'Closing...',\r\n        [ReadyState.CLOSED]: 'Connection closed.',\r\n        [ReadyState.UNINSTANTIATED]: 'Connection uninstantiated',\r\n    }[readyState];\r\n    const [chatType, setChatType] = useState<ChatType>(ChatType.PUBLIC)\r\n    const [chatMessage, setChatMessage] = useState(\"\")\r\n    const [chatMessages, setChatMessages] = useState<Array<Chat>>([])\r\n    const [roles, setRoles] = useState<Array<Role>>([])\r\n    const [users, setUsers] = useState<Array<User>>([])\r\n    const [isMod, setMod] = useState(false)\r\n    const [name, setName] = useState(\"Unnamed User\")\r\n\r\n    const [assignedRole, setAssignedRole] = useState<RoleAssignment | null>(null)\r\n\r\n    const [presetDialogVisible, setPresetDialogVisible] = useState(false)\r\n\r\n    const colWidth = 450\r\n    const mobile = useMediaQuery(`(max-width:${2.25 * colWidth}px)`)\r\n\r\n    useEffect(() => {\r\n        if (lastJsonMessage) {\r\n            console.log(JSON.stringify(lastJsonMessage))\r\n            const message = lastJsonMessage as Message\r\n\r\n            if (message.chat) {\r\n                setChatMessages([...chatMessages, message.chat])\r\n            } else if (message.roles) {\r\n                setRoles(message.roles)\r\n            } else if (message.roleDelta) {\r\n                // If there are any scheduled requests to update the role that we are receiving a change for, cancel them\r\n                if (roles[message.roleDelta.index] && roles[message.roleDelta.index].updateRequestTimeout)\r\n                    clearTimeout(roles[message.roleDelta.index].updateRequestTimeout as number)\r\n                // Then overwrite our local copy with the version from the server\r\n                setRoles(edit(roles, message.roleDelta.index, message.roleDelta.edit))\r\n            } else if (message.users) {\r\n                setUsers(message.users)\r\n            } else if (message.userDelta) {\r\n                setUsers(edit(users, message.userDelta.index, message.userDelta.edit))\r\n            } else if (message.assignment) {\r\n                setAssignedRole(message.assignment)\r\n            }\r\n\r\n        }\r\n    }, [lastJsonMessage])\r\n    console.log(\"roles -> \" + JSON.stringify(roles))\r\n    return <>\r\n        <PageContainer>\r\n            <Grid\r\n                columns={mobile ? '1fr' : `repeat(2, ${colWidth}px)`}\r\n                style={{margin: '1rem'}}\r\n                rows={mobile ? \"auto auto 300px auto\" : \"repeat(2, 300px) auto\"}\r\n                areas={mobile ? [\r\n                    \"role\",\r\n                    \"userlist\",\r\n                    \"history\",\r\n                    \"message\"\r\n                ] : [\r\n                    \"role      userlist\",\r\n                    \"history   history\",\r\n                    \"message   message\"\r\n                ]}\r\n            >\r\n                <CustomCell area=\"role\" padded boxed scroll>\r\n                    {roles.map((role, i) => <RoleView key={i} role={role} onChange={editedRole => {\r\n                        const msg: Message = {\r\n                            roleDelta: {\r\n                                index: i,\r\n                                edit: editedRole\r\n                            }\r\n                        }\r\n                        // Role deletion is synchronous, i.e. we don't make any client side changes until the server gets back to us.\r\n                        // Name/team/quantity edits, however, are async: we make a local change immediately and queue a request to the server\r\n                        // That way the user can finish typing before a message to the server is sent (to reduce traffic by not sending messages for every new character)\r\n                        if (editedRole) {// non-deletion edit\r\n                            // Clear any queued changes to this role -- they're now out of date\r\n                            if (role.updateRequestTimeout)\r\n                                clearTimeout(role.updateRequestTimeout)\r\n\r\n                            // Don't send any api calls until the user has stopped typing for a bit\r\n                            const timeout = window.setTimeout(() => {\r\n                                sendJsonMessage(msg)\r\n                                // Cleanup\r\n                                role.updateRequestTimeout = null\r\n                            }, 1000)\r\n\r\n                            // Make the local-only change\r\n                            const newRoles = [...roles]\r\n                            newRoles[i] = editedRole\r\n                            newRoles[i].updateRequestTimeout = timeout\r\n                            setRoles(newRoles)\r\n                        } else {\r\n                            // Deletions are fully synchronous (not changed on the client first, must wait for authoritative server response)\r\n                            // So send it immediately\r\n                            sendJsonMessage(msg)\r\n                        }\r\n\r\n                    }}/>)}\r\n\r\n                    <Button startIcon={<AddIcon/>} onClick={() => {\r\n                        const newRole: Role = {\r\n                            name: \"\",\r\n                            team: \"\",\r\n                            quantity: 1\r\n                        }\r\n                        const msg: Message = {\r\n                            roleDelta: {\r\n                                index: roles.length,\r\n                                edit: newRole\r\n                            }\r\n                        }\r\n                        sendJsonMessage(msg) // Role creation is done synchronously with the server, i.e. the server is authoratative and we don't make any client side changes until the server gets back to us\r\n                    }}>\r\n                        Add role\r\n                    </Button>\r\n                    <Button startIcon={<SendIcon/>} onClick={() => {\r\n                        const msg: Message = {\r\n                            chat: {\r\n                                msg: \"/assign\"\r\n                            }\r\n                        }\r\n                        sendJsonMessage(msg)\r\n                    }}>\r\n                        Assign roles to users\r\n                    </Button>\r\n                    <Button startIcon={<Build/>} onClick={() => setPresetDialogVisible(true)}>\r\n                        Use preset\r\n                    </Button>\r\n                </CustomCell>\r\n                <CustomCell area=\"userlist\" padded boxed scroll>\r\n                    <TextField\r\n                        label=\"Your user name\"\r\n                        value={name}\r\n                        onChange={e => {\r\n                            setName(e.target.value)\r\n                            const msg: Message = {\r\n                                name: e.target.value\r\n                            }\r\n                            if (nameChangeTimeout) {\r\n                                clearTimeout(nameChangeTimeout)\r\n                            }\r\n                            nameChangeTimeout = window.setTimeout(() => {\r\n                                sendJsonMessage(msg)\r\n                                // cleanup\r\n                                nameChangeTimeout = null\r\n                            }, 1000)\r\n                        }}/>\r\n                    <FormControlLabel control={\r\n                        <Checkbox\r\n                            checked={isMod}\r\n                            onChange={e => {\r\n                                setMod(e.target.checked)\r\n                                const msg: Message = {\r\n                                    mod: e.target.checked\r\n                                }\r\n                                sendJsonMessage(msg)\r\n                            }}\r\n                            inputProps={{'aria-label': 'primary checkbox'}}\r\n                        />} label=\"Moderator opt-in\"/>\r\n\r\n\r\n                    <List>\r\n                        {users.map((user) =>\r\n                            <ListItem>\r\n                                <ListItemAvatar>\r\n                                    <Avatar />\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={user.name}\r\n                                              secondary={user.mod ? \"Moderator\" : (isMod && `${user.role} ${user.team && `(${user.team})`}`)}/>\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                </CustomCell>\r\n                <CustomCell area=\"history\" padded boxed scroll>\r\n                    {chatMessages.map((chat) => <ChatMessage chat={chat}/>)}\r\n                </CustomCell>\r\n                <Cell area=\"message\">\r\n                    <Grid columns={\"8ch 1fr\"}>\r\n                        <Cell>\r\n                            <Select value={chatType} onChange={e => {\r\n                                setChatType(e.target.value as ChatType)\r\n                            }}>\r\n                                {chatTypes.map(type =>\r\n                                    <MenuItem value={type}>{getFriendlyName(type)}</MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </Cell>\r\n                        <Cell>\r\n                            <TextField fullWidth value={chatMessage}\r\n                                       onChange={e => setChatMessage(e.target.value as string)}\r\n                                       onKeyPress={e => {\r\n                                           if (e.key === 'Enter' && chatMessage.length > 0) {\r\n                                               const message: Message = {\r\n                                                   chat: {\r\n                                                       msg: chatMessage,\r\n                                                       type: chatType\r\n                                                   }\r\n                                               }\r\n                                               sendJsonMessage(message)\r\n                                               setChatMessage(\"\")\r\n                                           }\r\n                                       }}\r\n                            />\r\n                        </Cell>\r\n                    </Grid>\r\n                </Cell>\r\n            </Grid>\r\n        </PageContainer>\r\n\r\n\r\n        {/*Dialogs*/}\r\n        <AssignmentDialog assignment={assignedRole} onClose={() => setAssignedRole(null)}/>\r\n        <PresetDialog visible={presetDialogVisible} onSelect={preset => {\r\n            if (preset) {\r\n                const msg: Message = {\r\n                    roles: preset.roles\r\n                }\r\n                sendJsonMessage(msg)\r\n            }\r\n            setPresetDialogVisible(false)\r\n        }}/>\r\n\r\n        {/*Dialog to cover screen when not connected*/}\r\n        <Dialog disableBackdropClick\r\n                disableEscapeKeyDown\r\n                open={readyState !== ReadyState.OPEN}>\r\n            <DialogTitle>{connectionStatus}</DialogTitle>\r\n        </Dialog>\r\n\r\n    </>\r\n}","C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\Home.tsx",["52"],"C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\Message.ts",[],"C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\RoleView.tsx",[],"C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\AssignmentDialog.tsx",[],"C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\1570s\\Documents\\Projects\\RoleAssigner\\frontend\\src\\components\\PresetDialog.tsx",["53"],"import React, {FunctionComponent, useEffect, useState} from \"react\";\r\nimport {Role} from \"../Message\";\r\nimport { styled } from '@material-ui/core/styles';\r\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Chip} from \"@material-ui/core\";\r\n\r\n\r\n\r\ninterface Preset {\r\n    name: string\r\n    roles: Array<Role>\r\n}\r\n\r\nconst presets: Array<Preset> = [\r\n    {\r\n        name: \"Empty\", roles: []\r\n    },\r\n    {\r\n        name: \"Secret Hitler\", roles: [\r\n            {name: \"Hitler\", quantity: 1, team: \"Evil\"},\r\n            {name: \"Facist\", quantity: 2, team: \"Evil\"},\r\n            {name: \"Liberal\", quantity: 4, team: \"Good\"}\r\n        ]\r\n    },\r\n    {\r\n        name: \"Avalon\", roles: [\r\n            {name: \"Assassin\", quantity: 1, team: \"Evil\"},\r\n            {name: \"Morgana\", quantity: 1, team: \"Evil\"},\r\n            {name: \"Mordred\", quantity: 1, team: \"Evil\"},\r\n            {name: \"Merlin\", quantity: 1, team: \"Good\"},\r\n            {name: \"Percival\", quantity: 1, team: \"Good\"},\r\n            {name: \"Liberal\", quantity: 2, team: \"Good\"}\r\n        ]\r\n    },\r\n    {\r\n        name: \"Mafia\", roles: [\r\n            {name: \"Mafia\", quantity: 3, team: \"Evil\"},\r\n            {name: \"Detective\", quantity: 1, team: \"Good\"},\r\n            {name: \"Medic\", quantity: 1, team: \"Good\"},\r\n            {name: \"Liberal\", quantity: 10, team: \"Good\"}\r\n        ]\r\n    },\r\n    {\r\n        name: \"Code Names\", roles: [\r\n            {name: \"Red Code Master\", quantity: 1, team: \"Red\"},\r\n            {name: \"Blue Code Master\", quantity: 1, team: \"Blue\"},\r\n            {name: \"Red Team Member\", quantity: 2, team: \"Red\"},\r\n            {name: \"Blue Team Memeber\", quantity: 2, team: \"Blue\"}\r\n        ]\r\n    },\r\n    {\r\n        name: \"Two Team (General)\", roles: [\r\n            {name: \"Players of Team 1\", quantity: 5, team: \"Team 1\"},\r\n            {name: \"Players of Team 2\", quantity: 5, team: \"Team 2\"},\r\n        ]\r\n    }\r\n]\r\n\r\nconst StyledChip = styled(Chip)({\r\n    margin: '0.15rem',\r\n});\r\n\r\n\r\nexport const PresetDialog: FunctionComponent<{ visible: boolean, onSelect: (preset: Preset | null) => any }> = props => {\r\n    const [chosenPreset, setChosenPreset] = useState<Preset | null>(null)\r\n\r\n    // Reset the UI on close\r\n    useEffect(() => {\r\n            if (!props.visible)\r\n                setChosenPreset(null)\r\n        }, [props.visible])\r\n\r\n    return <Dialog open={props.visible} onClose={() => props.onSelect(null)}>\r\n        <DialogTitle>Choose a role preset</DialogTitle>\r\n        <DialogContent>\r\n            {presets.map(preset =>\r\n                <StyledChip key={preset.name} label={preset.name} color={chosenPreset === preset ? \"primary\" : \"default\"}\r\n                      onClick={() => setChosenPreset(preset)}/>)}\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={() => props.onSelect(null)} color=\"primary\" autoFocus>Cancel</Button>\r\n            <Button onClick={() => props.onSelect(chosenPreset)} color=\"primary\" autoFocus>Select</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n}",{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":12},{"ruleId":"54","severity":1,"message":"58","line":9,"column":3,"nodeType":"56","messageId":"57","endLine":9,"endColumn":7},{"ruleId":"54","severity":1,"message":"59","line":9,"column":13,"nodeType":"56","messageId":"57","endLine":9,"endColumn":18},{"ruleId":"54","severity":1,"message":"60","line":12,"column":13,"nodeType":"56","messageId":"57","endLine":12,"endColumn":26},{"ruleId":"54","severity":1,"message":"61","line":12,"column":28,"nodeType":"56","messageId":"57","endLine":12,"endColumn":45},{"ruleId":"54","severity":1,"message":"62","line":28,"column":16,"nodeType":"56","messageId":"57","endLine":28,"endColumn":24},{"ruleId":"54","severity":1,"message":"63","line":28,"column":26,"nodeType":"56","messageId":"57","endLine":28,"endColumn":41},{"ruleId":"64","severity":1,"message":"65","line":57,"column":38,"nodeType":"66","messageId":"67","endLine":57,"endColumn":40},{"ruleId":"54","severity":1,"message":"68","line":82,"column":9,"nodeType":"56","messageId":"57","endLine":82,"endColumn":20},{"ruleId":"54","severity":1,"message":"69","line":84,"column":9,"nodeType":"56","messageId":"57","endLine":84,"endColumn":20},{"ruleId":"70","severity":1,"message":"71","line":138,"column":8,"nodeType":"72","endLine":138,"endColumn":25,"suggestions":"73"},{"ruleId":"54","severity":1,"message":"74","line":1,"column":16,"nodeType":"56","messageId":"57","endLine":1,"endColumn":33},{"ruleId":"54","severity":1,"message":"61","line":4,"column":55,"nodeType":"56","messageId":"57","endLine":4,"endColumn":72},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Badge' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'Security' is defined but never used.","'SecurityTwoTone' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'sendMessage' is assigned a value but never used.","'lastMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chatMessages', 'roles', and 'users'. Either include them or remove the dependency array. You can also do a functional update 'setChatMessages(c => ...)' if you only need 'chatMessages' in the 'setChatMessages' call.","ArrayExpression",["75"],"'FunctionComponent' is defined but never used.",{"desc":"76","fix":"77"},"Update the dependencies array to be: [chatMessages, lastJsonMessage, roles, users]",{"range":"78","text":"79"},[5319,5336],"[chatMessages, lastJsonMessage, roles, users]"]
{"version":3,"sources":["components/Home.tsx","Message.ts","components/RoleView.tsx","components/AssignmentDialog.tsx","components/PresetDialog.tsx","components/Room.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChatType","InputContainter","styled","div","FormContainer","PageContainer","Home","props","useState","roomName","setRoomName","history","useHistory","goToRoom","length","push","TextField","id","label","variant","size","placeholder","fullWidth","onChange","e","target","value","onKeyPress","key","Button","onClick","chatTypes","PUBLIC","ANON","TO_MOD","TEAM","ROLE","getFriendlyName","chatType","charAt","toUpperCase","slice","toLowerCase","replace","RoleView","columns","role","name","team","type","quantity","parseInt","IconButton","getRoleAssignmentMessage","assignment","requested_by","AssignmentDialog","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","color","autoFocus","presets","roles","StyledChip","Chip","margin","PresetDialog","chosenPreset","setChosenPreset","useEffect","visible","onSelect","map","preset","CustomCell","Cell","padded","boxed","scroll","SystemChatMessage","ChatMessage","ref","useRef","thisElement","current","scrollIntoView","chat","SYSTEM","msg","userName","edit","array","index","newVal","newArray","splice","nameChangeTimeout","welcomeMessage","Room","roomCode","useParams","useWebSocket","retryOnError","reconnectInterval","reconnectAttempts","sendJsonMessage","sendMessage","lastJsonMessage","lastMessage","readyState","connectionStatus","ReadyState","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","setChatType","chatMessage","setChatMessage","chatMessages","setChatMessages","setRoles","users","setUsers","isMod","setMod","setName","assignedRole","setAssignedRole","presetDialogVisible","setPresetDialogVisible","mobile","useMediaQuery","console","log","JSON","stringify","message","roleDelta","updateRequestTimeout","clearTimeout","userDelta","systemChatMessage","style","rows","areas","area","i","editedRole","timeout","window","setTimeout","newRoles","startIcon","Build","FormControlLabel","control","Checkbox","checked","mod","inputProps","List","user","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","Select","MenuItem","disableBackdropClick","disableEscapeKeyDown","App","hashType","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8d8245b.chunk.js","sourcesContent":["import React, {FunctionComponent, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst InputContainter = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  \r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n  width: 500px;\r\n  @media (max-width: 500px) {\r\n    width: 100vw;\r\n  }\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageContainer = styled.div`\r\n  width: 100vw;\r\n  min-height: 60vh; // may need to be >100vh on mobile\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Home: React.FunctionComponent<{}> = (props) => {\r\n\r\n\r\n    const [roomName, setRoomName] = useState(\"\");\r\n\r\n    const history = useHistory()\r\n    const goToRoom = () => {\r\n        if (roomName.length > 0) {\r\n            history.push(`/RoleAssigner/${roomName}`)\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <PageContainer>\r\n            <FormContainer>\r\n                <h1>Role Assigner</h1>\r\n                <p>An online chat room where you anonymously divvy up roles. To create a new room or join an existing one,\r\n                    enter a room name and click the button.</p>\r\n                <InputContainter>\r\n                    <TextField id=\"outlined-basic\" label=\"Room name\" variant=\"outlined\" size=\"medium\" placeholder=\"Room name\"\r\n                               fullWidth\r\n                               onChange={e => setRoomName(e.target.value)}\r\n                               onKeyPress={e => {if (e.key === 'Enter') {\r\n                                   goToRoom()\r\n                               }}}\r\n                    />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={goToRoom}\r\n                    >Join room</Button>\r\n                </InputContainter>\r\n</FormContainer>\r\n\r\n        </PageContainer>\r\n    </>\r\n}","export interface Message {\r\n    // 1. Client to server only\r\n    name?: string\r\n    mod?: boolean\r\n\r\n    // 2. Server to client only\r\n    assignment?: RoleAssignment    // the server assigns a user a role\r\n    users?: Array<User>            // the server informs the client of the users in the room\r\n    roles?: Array<Role>            // informs of a change in the roles\r\n    userDelta?: ListDelta<User>    // change one user in the Array\r\n\r\n    // 3. Both ways - client sends to server and server then broadcasts to clients\r\n    chat?: Chat                    // send a chat message\r\n    roleDelta?: ListDelta<Role>     // change one role in the list\r\n\r\n}\r\n\r\nexport interface RoleAssignment {\r\n    role: String\r\n    team: String\r\n    requested_by: String\r\n}\r\n\r\nexport interface User {\r\n    name: String\r\n    mod: Boolean\r\n    role: String\r\n    team: String\r\n}\r\n\r\nexport interface Role {\r\n    name: String\r\n    quantity: number\r\n    team: String\r\n\r\n    // Used by client only to debounce edits to name\r\n    // A timeout is (re)set on every client-side change to name, and an API request to the server is made\r\n    // when the timeout expires\r\n    updateRequestTimeout?: number | null // timeout id is number\r\n}\r\n\r\nexport enum ChatType {\r\n    PUBLIC = \"PUBLIC\",\r\n    ANON = \"ANON\",\r\n    TO_MOD = \"TO_MOD\",\r\n    TEAM = \"TEAM\",\r\n    ROLE = \"ROLE\",\r\n    SYSTEM = \"SYSTEM\" // currently only used on the frontend e.g. to put role assignments in that chat\r\n}\r\n\r\nexport const chatTypes = [ChatType.PUBLIC, ChatType.ANON, ChatType.TO_MOD, ChatType.TEAM, ChatType.ROLE]\r\n\r\nexport function getFriendlyName(chatType: ChatType): string {\r\n    return chatType.charAt(0).toUpperCase() + chatType.slice(1).toLowerCase().replace(/_/g, \" \")\r\n}\r\n\r\nexport interface Chat {\r\n    msg: String\r\n    name?: String\r\n    type?: ChatType\r\n    team?: String\r\n    role?: String\r\n}\r\n\r\ninterface ListDelta<T> {\r\n    index: number\r\n    edit: T | null\r\n}","import React, {FunctionComponent} from \"react\";\r\nimport {Role} from \"../Message\";\r\nimport {Cell, Grid} from \"styled-css-grid\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\ninterface RoleViewProps {\r\n    role: Role,\r\n    onChange: (role: Role | null) => any\r\n}\r\nexport const RoleView: FunctionComponent<RoleViewProps> = props => {\r\n    return <>\r\n        <Grid\r\n            columns=\"1fr 1fr 4ch auto\"\r\n        >\r\n            <Cell>\r\n                <TextField label=\"Role Name\" fullWidth value={props.role.name} onChange={e =>\r\n                    props.onChange({...props.role, name: e.target.value as string})\r\n                }/>\r\n            </Cell>\r\n            <Cell>\r\n                <TextField label=\"Role Team\" fullWidth value={props.role.team} onChange={e =>\r\n                    props.onChange({...props.role, team: e.target.value as string})\r\n                }/>\r\n            </Cell>\r\n            <Cell>\r\n                <TextField label=\"Quantity\" type=\"number\" fullWidth value={props.role.quantity} onChange={e =>\r\n                    props.onChange({...props.role, quantity: parseInt(e.target.value)})\r\n                }/>\r\n            </Cell>\r\n            <Cell>\r\n                <IconButton onClick={() => {\r\n                    props.onChange(null) // delete\r\n                }}>\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Cell>\r\n        </Grid>\r\n    </>\r\n}","import React, {FunctionComponent} from \"react\";\r\nimport {RoleAssignment} from \"../Message\";\r\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\r\n\r\nexport function getRoleAssignmentMessage(assignment: RoleAssignment | null) {\r\n    if (assignment === null) {\r\n        return \"A role assigment occurred.\"\r\n    }\r\n    const role = assignment?.role ?? '\"\"'\r\n    return `${assignment?.requested_by} requested a role assignment. Your assigned role is ${role} ${assignment?.team ? ` and your team is ${assignment.team}.` : \".\"}`\r\n}\r\n\r\nexport const AssignmentDialog: FunctionComponent<{assignment: RoleAssignment | null, onClose: ()=>any}> = props => {\r\n    const role = props.assignment?.role ?? '\"\"'\r\n    return <Dialog open={props.assignment != null} onClose={props.onClose}>\r\n        <DialogTitle>Your role is {role}</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>\r\n                {getRoleAssignmentMessage(props.assignment)}\r\n            </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={props.onClose} color=\"primary\" autoFocus>Close</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n}","import React, {FunctionComponent, useEffect, useState} from \"react\";\r\nimport {Role} from \"../Message\";\r\nimport { styled } from '@material-ui/core/styles';\r\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Chip} from \"@material-ui/core\";\r\n\r\n\r\n\r\ninterface Preset {\r\n    name: string\r\n    roles: Array<Role>\r\n}\r\n\r\nconst presets: Array<Preset> = [\r\n    {\r\n        name: \"Empty\", roles: []\r\n    },\r\n    {\r\n        name: \"Secret Hitler\", roles: [\r\n            {name: \"Hitler\", quantity: 1, team: \"Evil\"},\r\n            {name: \"Facist\", quantity: 2, team: \"Evil\"},\r\n            {name: \"Liberal\", quantity: 4, team: \"Good\"}\r\n        ]\r\n    },\r\n    {\r\n        name: \"Avalon\", roles: [\r\n            {name: \"Assassin\", quantity: 1, team: \"Evil\"},\r\n            {name: \"Morgana\", quantity: 1, team: \"Evil\"},\r\n            {name: \"Mordred\", quantity: 1, team: \"Evil\"},\r\n            {name: \"Merlin\", quantity: 1, team: \"Good\"},\r\n            {name: \"Percival\", quantity: 1, team: \"Good\"},\r\n            {name: \"Liberal\", quantity: 2, team: \"Good\"}\r\n        ]\r\n    },\r\n    {\r\n        name: \"Mafia\", roles: [\r\n            {name: \"Mafia\", quantity: 3, team: \"Evil\"},\r\n            {name: \"Detective\", quantity: 1, team: \"Good\"},\r\n            {name: \"Medic\", quantity: 1, team: \"Good\"},\r\n            {name: \"Liberal\", quantity: 10, team: \"Good\"}\r\n        ]\r\n    },\r\n    {\r\n        name: \"Code Names\", roles: [\r\n            {name: \"Red Code Master\", quantity: 1, team: \"Red\"},\r\n            {name: \"Blue Code Master\", quantity: 1, team: \"Blue\"},\r\n            {name: \"Red Team Member\", quantity: 2, team: \"Red\"},\r\n            {name: \"Blue Team Memeber\", quantity: 2, team: \"Blue\"}\r\n        ]\r\n    },\r\n    {\r\n        name: \"Two Team (General)\", roles: [\r\n            {name: \"Players of Team 1\", quantity: 5, team: \"Team 1\"},\r\n            {name: \"Players of Team 2\", quantity: 5, team: \"Team 2\"},\r\n        ]\r\n    }\r\n]\r\n\r\nconst StyledChip = styled(Chip)({\r\n    margin: '0.15rem',\r\n});\r\n\r\n\r\nexport const PresetDialog: FunctionComponent<{ visible: boolean, onSelect: (preset: Preset | null) => any }> = props => {\r\n    const [chosenPreset, setChosenPreset] = useState<Preset | null>(null)\r\n\r\n    // Reset the UI on close\r\n    useEffect(() => {\r\n            if (!props.visible)\r\n                setChosenPreset(null)\r\n        }, [props.visible])\r\n\r\n    return <Dialog open={props.visible} onClose={() => props.onSelect(null)}>\r\n        <DialogTitle>Choose a role preset</DialogTitle>\r\n        <DialogContent>\r\n            {presets.map(preset =>\r\n                <StyledChip key={preset.name} label={preset.name} color={chosenPreset === preset ? \"primary\" : \"default\"}\r\n                      onClick={() => setChosenPreset(preset)}/>)}\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={() => props.onSelect(null)} color=\"primary\" autoFocus>Cancel</Button>\r\n            <Button onClick={() => props.onSelect(chosenPreset)} color=\"primary\" autoFocus>Select</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n}","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {useParams} from \"react-router\";\r\nimport useWebSocket, {ReadyState} from \"react-use-websocket\";\r\nimport {Chat, ChatType, chatTypes, getFriendlyName, Message, Role, RoleAssignment, User} from \"../Message\";\r\n// @ts-ignore\r\nimport {Cell, Grid} from \"styled-css-grid\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogTitle,\r\n    FormControlLabel,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    useMediaQuery\r\n} from \"@material-ui/core\";\r\nimport {RoleView} from \"./RoleView\"\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport {AssignmentDialog, getRoleAssignmentMessage} from \"./AssignmentDialog\";\r\nimport {PresetDialog} from \"./PresetDialog\";\r\nimport {Build} from \"@material-ui/icons\";\r\n\r\nexport const PageContainer = styled.div`\r\n  width: 100vw;\r\n  min-height: 100vh; // may need to be >100vh on mobile\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst CustomCell = styled(Cell)<{ padded?: boolean, boxed?: boolean, scroll?: boolean }>`\r\n  ${props => props.padded && \"padding: 0.5rem;\"}\r\n  ${props => props.boxed && \"border: 3px solid red;\"}\r\n  ${props => props.scroll && \"overflow-y: auto;\"}\r\n  overflow-wrap: break-word; // prevent expanding horizontally past the bounds of the container\r\n  height: unset; // corrects a bug in library\r\n`;\r\n\r\nconst SystemChatMessage = styled.div`\r\n  color: red;\r\n  font-style: italic;\r\n`;\r\n\r\ninterface SystemMessage {\r\n    msg: string;\r\n}\r\n\r\nconst ChatMessage: React.FunctionComponent<{ chat: Chat }> = (props) => {\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        const thisElement = ref.current\r\n        thisElement?.scrollIntoView()\r\n    }, [])\r\n\r\n    if (props.chat.type == ChatType.SYSTEM) {\r\n        return <SystemChatMessage>\r\n            {props.chat.msg}\r\n        </SystemChatMessage>\r\n    }\r\n\r\n    if (!props.chat || !props.chat.type)\r\n        return <></>\r\n    const userName = props.chat.type == ChatType.ANON ? \"Anonymous\" : props.chat.name\r\n    return <div ref={ref}>\r\n        [{getFriendlyName(props.chat.type)}] {props.chat.team && `(${props.chat.team}) `}{props.chat.role && `(${props.chat.role}) `}<b>{userName}:</b> {props.chat.msg}<br/>\r\n    </div>\r\n}\r\n\r\n// Returns an edited version of an array\r\n// Edits (or appends) a value at an index, or deletes an element if newVal is null\r\nfunction edit<T>(array: Array<T>, index: number, newVal: T | null): Array<T> {\r\n    const newArray = [...array]\r\n    if (!newVal) {\r\n        newArray.splice(index, 1)\r\n    } else {\r\n        newArray[index] = newVal\r\n    }\r\n    return newArray\r\n}\r\n\r\n// Used to debounce changes to name\r\n// So that name change API calls are only made when the user stops typing\r\nvar nameChangeTimeout: number | null = null\r\n\r\nconst welcomeMessage: Chat = {\r\n    type: ChatType.SYSTEM,\r\n    msg: \"Welcome to the role assignment room! To invite others, share the URL.\"\r\n}\r\n\r\nexport const Room: React.FunctionComponent<{}> = (props) => {\r\n    const {roomCode} = useParams<{ roomCode: string }>()\r\n    const {\r\n        sendMessage,\r\n        sendJsonMessage,\r\n        lastMessage,\r\n        lastJsonMessage,\r\n        readyState,\r\n    } = useWebSocket(`wss://roleassigner.herokuapp.com/${roomCode.toLowerCase()}`, {\r\n        retryOnError: true,\r\n        reconnectInterval: 4000,\r\n        reconnectAttempts: 9\r\n    })\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: 'Attempting to connect to server...',\r\n        [ReadyState.OPEN]: 'Connection established.',\r\n        [ReadyState.CLOSING]: 'Closing...',\r\n        [ReadyState.CLOSED]: 'Connection closed.',\r\n        [ReadyState.UNINSTANTIATED]: 'Connection uninstantiated',\r\n    }[readyState];\r\n    const [chatType, setChatType] = useState<ChatType>(ChatType.PUBLIC)\r\n    const [chatMessage, setChatMessage] = useState(\"\")\r\n    const [chatMessages, setChatMessages] = useState<Array<Chat>>([welcomeMessage])\r\n    const [roles, setRoles] = useState<Array<Role>>([])\r\n    const [users, setUsers] = useState<Array<User>>([])\r\n    const [isMod, setMod] = useState(false)\r\n    const [name, setName] = useState(\"Unnamed User\")\r\n\r\n    const [assignedRole, setAssignedRole] = useState<RoleAssignment | null>(null)\r\n\r\n    const [presetDialogVisible, setPresetDialogVisible] = useState(false)\r\n\r\n    const colWidth = 450\r\n    const mobile = useMediaQuery(`(max-width:${2.25 * colWidth}px)`)\r\n\r\n    useEffect(() => {\r\n        if (lastJsonMessage) {\r\n            console.log(JSON.stringify(lastJsonMessage))\r\n            const message = lastJsonMessage as Message\r\n\r\n            if (message.chat) {\r\n                setChatMessages([...chatMessages, message.chat])\r\n            } else if (message.roles) {\r\n                setRoles(message.roles)\r\n            } else if (message.roleDelta) {\r\n                // If there are any scheduled requests to update the role that we are receiving a change for, cancel them\r\n                if (roles[message.roleDelta.index] && roles[message.roleDelta.index].updateRequestTimeout)\r\n                    clearTimeout(roles[message.roleDelta.index].updateRequestTimeout as number)\r\n                // Then overwrite our local copy with the version from the server\r\n                setRoles(edit(roles, message.roleDelta.index, message.roleDelta.edit))\r\n            } else if (message.users) {\r\n                setUsers(message.users)\r\n            } else if (message.userDelta) {\r\n                setUsers(edit(users, message.userDelta.index, message.userDelta.edit))\r\n            } else if (message.assignment) {\r\n                setAssignedRole(message.assignment)\r\n                const systemChatMessage: Chat = {\r\n                    msg: getRoleAssignmentMessage(message.assignment),\r\n                    type: ChatType.SYSTEM\r\n                }\r\n                setChatMessages([...chatMessages, systemChatMessage])\r\n            }\r\n\r\n        }\r\n    }, [lastJsonMessage])\r\n    console.log(\"roles -> \" + JSON.stringify(roles))\r\n    return <>\r\n        <PageContainer>\r\n            <Grid\r\n                columns={mobile ? '1fr' : `repeat(2, ${colWidth}px)`}\r\n                style={{margin: '1rem'}}\r\n                rows={mobile ? \"auto auto 300px auto\" : \"repeat(2, 300px) auto\"}\r\n                areas={mobile ? [\r\n                    \"role\",\r\n                    \"userlist\",\r\n                    \"history\",\r\n                    \"message\"\r\n                ] : [\r\n                    \"role      userlist\",\r\n                    \"history   history\",\r\n                    \"message   message\"\r\n                ]}\r\n            >\r\n                <CustomCell area=\"role\" padded boxed scroll>\r\n                    {roles.map((role, i) => <RoleView key={i} role={role} onChange={editedRole => {\r\n                        const msg: Message = {\r\n                            roleDelta: {\r\n                                index: i,\r\n                                edit: editedRole\r\n                            }\r\n                        }\r\n                        // Role deletion is synchronous, i.e. we don't make any client side changes until the server gets back to us.\r\n                        // Name/team/quantity edits, however, are async: we make a local change immediately and queue a request to the server\r\n                        // That way the user can finish typing before a message to the server is sent (to reduce traffic by not sending messages for every new character)\r\n                        if (editedRole) {// non-deletion edit\r\n                            // Clear any queued changes to this role -- they're now out of date\r\n                            if (role.updateRequestTimeout)\r\n                                clearTimeout(role.updateRequestTimeout)\r\n\r\n                            // Don't send any api calls until the user has stopped typing for a bit\r\n                            const timeout = window.setTimeout(() => {\r\n                                sendJsonMessage(msg)\r\n                                // Cleanup\r\n                                role.updateRequestTimeout = null\r\n                            }, 1000)\r\n\r\n                            // Make the local-only change\r\n                            const newRoles = [...roles]\r\n                            newRoles[i] = editedRole\r\n                            newRoles[i].updateRequestTimeout = timeout\r\n                            setRoles(newRoles)\r\n                        } else {\r\n                            // Deletions are fully synchronous (not changed on the client first, must wait for authoritative server response)\r\n                            // So send it immediately\r\n                            sendJsonMessage(msg)\r\n                        }\r\n\r\n                    }}/>)}\r\n\r\n                    <Button startIcon={<AddIcon/>} onClick={() => {\r\n                        const newRole: Role = {\r\n                            name: \"\",\r\n                            team: \"\",\r\n                            quantity: 1\r\n                        }\r\n                        const msg: Message = {\r\n                            roleDelta: {\r\n                                index: roles.length,\r\n                                edit: newRole\r\n                            }\r\n                        }\r\n                        sendJsonMessage(msg) // Role creation is done synchronously with the server, i.e. the server is authoratative and we don't make any client side changes until the server gets back to us\r\n                    }}>\r\n                        Add role\r\n                    </Button>\r\n                    <Button startIcon={<SendIcon/>} onClick={() => {\r\n                        const msg: Message = {\r\n                            chat: {\r\n                                msg: \"/assign\"\r\n                            }\r\n                        }\r\n                        sendJsonMessage(msg)\r\n                    }}>\r\n                        Assign roles to users\r\n                    </Button>\r\n                    <Button startIcon={<Build/>} onClick={() => setPresetDialogVisible(true)}>\r\n                        Use preset\r\n                    </Button>\r\n                </CustomCell>\r\n                <CustomCell area=\"userlist\" padded boxed scroll>\r\n                    <TextField\r\n                        label=\"Your user name\"\r\n                        value={name}\r\n                        onChange={e => {\r\n                            setName(e.target.value)\r\n                            const msg: Message = {\r\n                                name: e.target.value\r\n                            }\r\n                            if (nameChangeTimeout) {\r\n                                clearTimeout(nameChangeTimeout)\r\n                            }\r\n                            nameChangeTimeout = window.setTimeout(() => {\r\n                                sendJsonMessage(msg)\r\n                                // cleanup\r\n                                nameChangeTimeout = null\r\n                            }, 1000)\r\n                        }}/>\r\n                    <FormControlLabel control={\r\n                        <Checkbox\r\n                            checked={isMod}\r\n                            onChange={e => {\r\n                                setMod(e.target.checked)\r\n                                const msg: Message = {\r\n                                    mod: e.target.checked\r\n                                }\r\n                                sendJsonMessage(msg)\r\n                            }}\r\n                            inputProps={{'aria-label': 'primary checkbox'}}\r\n                        />} label=\"Moderator opt-in\"/>\r\n\r\n\r\n                    <List>\r\n                        {users.map((user) =>\r\n                            <ListItem>\r\n                                <ListItemAvatar>\r\n                                    <Avatar/>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={user.name}\r\n                                              secondary={user.mod ? \"Moderator\" : (isMod && `${user.role} ${user.team && `(${user.team})`}`)}/>\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                </CustomCell>\r\n                <CustomCell area=\"history\" padded boxed scroll>\r\n                    {chatMessages.map((chat) => <ChatMessage chat={chat}/>)}\r\n                </CustomCell>\r\n                <Cell area=\"message\">\r\n                    <Grid columns={\"8ch 1fr\"}>\r\n                        <Cell>\r\n                            <Select value={chatType} onChange={e => {\r\n                                setChatType(e.target.value as ChatType)\r\n                            }}>\r\n                                {chatTypes.map(type =>\r\n                                    <MenuItem value={type}>{getFriendlyName(type)}</MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </Cell>\r\n                        <Cell>\r\n                            <TextField fullWidth value={chatMessage}\r\n                                       onChange={e => setChatMessage(e.target.value as string)}\r\n                                       onKeyPress={e => {\r\n                                           if (e.key === 'Enter' && chatMessage.length > 0) {\r\n                                               const message: Message = {\r\n                                                   chat: {\r\n                                                       msg: chatMessage,\r\n                                                       type: chatType\r\n                                                   }\r\n                                               }\r\n                                               sendJsonMessage(message)\r\n                                               setChatMessage(\"\")\r\n                                           }\r\n                                       }}\r\n                            />\r\n                        </Cell>\r\n                    </Grid>\r\n                </Cell>\r\n            </Grid>\r\n        </PageContainer>\r\n\r\n\r\n        {/*Dialogs*/}\r\n        <AssignmentDialog assignment={assignedRole} onClose={() => setAssignedRole(null)}/>\r\n        <PresetDialog visible={presetDialogVisible} onSelect={preset => {\r\n            if (preset) {\r\n                const msg: Message = {\r\n                    roles: preset.roles\r\n                }\r\n                sendJsonMessage(msg)\r\n            }\r\n            setPresetDialogVisible(false)\r\n        }}/>\r\n\r\n        {/*Dialog to cover screen when not connected*/}\r\n        <Dialog disableBackdropClick\r\n                disableEscapeKeyDown\r\n                open={readyState !== ReadyState.OPEN}>\r\n            <DialogTitle>{connectionStatus}</DialogTitle>\r\n        </Dialog>\r\n\r\n    </>\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport {\r\n  Switch,\r\n  Route,\r\n  HashRouter\r\n} from \"react-router-dom\";\r\nimport {Home} from \"./components/Home\";\r\nimport {Room} from \"./components/Room\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter hashType=\"noslash\" >\r\n      <Switch>\r\n        <Route path=\"/RoleAssigner/:roomCode\">\r\n          <Room />\r\n        </Route>\r\n        <Route path=\"/RoleAssigner\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}